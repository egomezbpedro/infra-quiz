# QUIZ GAME APP DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: quiz-app
  name: quiz-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: quiz-app
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: quiz-app
    spec:
      containers:
      - image: europe-west1-docker.pkg.dev/whp-quiz-game/whp-quiz-repository/whp-quiz-game
        name: quiz-app-container
        imagePullPolicy: Always
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
          - name: QUIZ_API_KEY
            valueFrom:
              secretKeyRef:
                name: api-secrets
                key: API_KEY
          - name: MONGO_USER
            valueFrom:
              secretKeyRef:
                name: mongo-credentials
                key: mongo-user
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongo-credentials
                key: mongo-password
          - name: MONGO_IP
            value: mongodb-service
          - name: MONGO_PORT
            value: "32000"
          - name: NODE_PORT
            value: "3080"
        ports:
          - containerPort: 3080

---
# QUIZ GAME APP SECRETS
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
type: Opaque
data:
  API_KEY: NXdpT29zSmNtM01lZ0FITXBuNUtOQ3B1aTFyT2ptRmpFYVRYc1dYYQ==

---
# QUIZ GAME APP SERVICE
apiVersion: v1
kind: Service
metadata:
  name: quiz-app
  labels:
    run: quiz-app
spec:
  ports:
  - port: 3080
    protocol: TCP
  selector:
    app: quiz-app
  type: LoadBalancer

---
# MOGO Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  strategy: {}
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - image: mongo
        name: mongo
        args: ["--dbpath","/data/db"]
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: mongo-user
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-credentials
              key: mongo-password
        volumeMounts:
        - name: mongo-data-dir
          mountPath: /data/db
      volumes:
      - name: mongo-data-dir
        persistentVolumeClaim:
          claimName: mongo-data

---
# MONGO SERVICE
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongo
  name: mongodb-service
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
    nodePort: 32000
  selector:
    app: mongo
  type: NodePort

---
# MONGO PV
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-data-pv
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 4Gi
  hostPath:
    path: /data/mongo
---
# MONGO PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-data
spec:
  accessModes:
    - ReadWriteOnce 
  resources:
    requests:
      storage: 1Gi

---
# MONGO DATABASE SECRETS
apiVersion: v1
kind: Secret
metadata:
  name: mongo-credentials
type: Opaque
data:
  mongo-user: aW5mcmE=
  mongo-password: Z29yZG9zaW5mdXR1cm8=
  mongo-port: MjcwMTc=
  mongo-ip: bW9uZ29kYg==